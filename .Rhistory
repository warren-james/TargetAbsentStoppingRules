if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
View(all_data_with_PRT_bl)
rm(list = ls())
setwd("E:/Github/TargetAbsentStoppingRules/analysis")
library(tidyverse)
#### pre-processing script for the SIBL data ####
# notes #
# key l = present
# key r = absent
# Shift function #
shift <- function(x,n){
c(rep(NA, n),x[seq(length(x)-n)])
}
#move up a directory
setwd("..")
#### retrieve SIBL data ####
blockFiles <- dir("data/BLSI/Block/")
sineFiles <- dir("data/BLSI/Sine/")
df <- data.frame(participant=character(), trial=numeric(), block=numeric(),
Target_pr=numeric(), Targ_side=numeric(), Name=character(),
key=character(), RT=numeric(), Message=character(), Difficulty=numeric(),
Block_Type=character())
# make the blocked data set #
bldat <- df
for (f in blockFiles)
{
d = read.csv(paste("data/BLSI/Block/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*bl", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
bldat = rbind(bldat, d)
}
rm(d)
# makes the sine dataset #
sidat <- df
for (f in sineFiles)
{
d = read.csv(paste("data/BLSI/sine/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*si", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
sidat = rbind(sidat, d)
}
rm(d)
rm(df)
sidat$Difficulty = sub(".*v", "", sidat$Name)
sidat$Difficulty = sub(".jpg*.", "", sidat$Difficulty)
# combine data
SIBL_data <- rbind(sidat,bldat)
# add site information
SIBL_data$participant <- as.numeric(SIBL_data$participant)
SIBL_data$site <- "Aberdeen"
SIBL_data$site[SIBL_data$participant > 20] <- "Essex"
SIBL_data$Group <- "SIBL"
# tidy
rm(bldat,sidat,blockFiles,sineFiles)
#### retrieve RABL data ####
blockFiles2 <- dir("data/BLRA/Block/")
randomFiles <- dir("data/BLRA/Random/")
df <- data.frame(participant=character(), trial=numeric(), block=numeric(),
Target_pr=numeric(), Targ_side=numeric(), Name=character(),
key=character(), RT=numeric(), Message=character(), Difficulty=numeric(),
Block_Type=character())
# make the blocked data set #
bldat2 <- df
for (f in blockFiles2)
{
d = read.csv(paste("data/BLRA/Block/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*bl", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
bldat2 = rbind(bldat2, d)
}
rm(d)
# makes the random dataset #
radat <- df
for (f in randomFiles)
{
d = read.csv(paste("data/BLRA/Random/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*ra", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
radat = rbind(radat, d)
}
rm(d)
rm(df)
radat$Difficulty = sub(".*v", "", radat$Name)
radat$Difficulty = sub(".jpg*.", "", radat$Difficulty)
RABL_data <- rbind(bldat2,radat)
RABL_data$Group <- "RABL"
# tidy up
rm(radat,bldat2,blockFiles2,randomFiles,f)
# prevent overlapping and add site info
RABL_data$participant <- as.numeric(RABL_data$participant)
RABL_data$site <- "Aberdeen"
RABL_data$site[RABL_data$participant > 20] <- "Essex"
RABL_data$participant <- RABL_data$participant + 20
#### combine all data into one set ####
all_data <- rbind(SIBL_data,RABL_data)
# get informtation about correct judgements
all_data$correctT <- 0
all_data$correctT[all_data$key == " l" & all_data$Target_pr == 1] <- 1
all_data$correctT[all_data$key == " r" & all_data$Target_pr == 0] <- 1
# change Difficulty levels to the actual degree of variance #
all_data$Difficulty[all_data$Difficulty == 1.5] <- 120
all_data$Difficulty[all_data$Difficulty == 1.8] <- 100
all_data$Difficulty[all_data$Difficulty == 2.3] <- 78
all_data$Difficulty[all_data$Difficulty == 2.8] <- 64
all_data$Difficulty[all_data$Difficulty == 3.3] <- 54
all_data$Difficulty[all_data$Difficulty == 3.8] <- 47
all_data$Difficulty[all_data$Difficulty == 4.3] <- 41
# keep needed columns
all_data <- select(all_data, "participant", "Block_Type", "block", "trial", "Target_pr", "key", "Difficulty", "correctT", "RT", "site", "Group")
# mark trials to be removed due to incorrect key press
all_data$RT[all_data$key == " x"] <- NA
#### add in PRT ####
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
count = 0
n_to_shift <- 1
for(Subject in people){
data_this_sub <- all_data[all_data$participant == Subject,]
nblocks <- unique(all_data[c("block","Block_Type")])
for (block_no in nblocks){
count = count + 1 #just so we can ID the first time we run this - must be a better way than this
data_this_block <- data_this_sub[data_this_sub$block == block_no,] #separates each block
data_this_block$PRT <- shift(data_this_block$RT,n_to_shift)
data_this_block <- data_this_block[-seq(n_to_shift),] #removes first n_to_shift trials in block
if (count == 1)
{
all_data_with_PRT_bl <- data_this_block #same as before, makes new data set
}
if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
count = 0
n_to_shift <- 1
for(Subject in people){
data_this_sub <- all_data[all_data$participant == Subject,]
nblocks <- unique(all_data$block)
for (block_no in nblocks){
count = count + 1 #just so we can ID the first time we run this - must be a better way than this
data_this_block <- data_this_sub[data_this_sub$block == block_no,] #separates each block
data_this_block$PRT <- shift(data_this_block$RT,n_to_shift)
data_this_block <- data_this_block[-seq(n_to_shift),] #removes first n_to_shift trials in block
if (count == 1)
{
all_data_with_PRT_bl <- data_this_block #same as before, makes new data set
}
if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
#### retrieve SIBL data ####
blockFiles <- dir("data/BLSI/Block/")
sineFiles <- dir("data/BLSI/Sine/")
df <- data.frame(participant=character(), trial=numeric(), block=numeric(),
Target_pr=numeric(), Targ_side=numeric(), Name=character(),
key=character(), RT=numeric(), Message=character(), Difficulty=numeric(),
Block_Type=character())
# make the blocked data set #
bldat <- df
for (f in blockFiles)
{
d = read.csv(paste("data/BLSI/Block/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*bl", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
bldat = rbind(bldat, d)
}
rm(d)
# makes the sine dataset #
sidat <- df
for (f in sineFiles)
{
d = read.csv(paste("data/BLSI/sine/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*si", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
sidat = rbind(sidat, d)
}
rm(d)
rm(df)
sidat$Difficulty = sub(".*v", "", sidat$Name)
sidat$Difficulty = sub(".jpg*.", "", sidat$Difficulty)
# combine data
SIBL_data <- rbind(sidat,bldat)
# add site information
SIBL_data$participant <- as.numeric(SIBL_data$participant)
SIBL_data$site <- "Aberdeen"
SIBL_data$site[SIBL_data$participant > 20] <- "Essex"
SIBL_data$Group <- "SIBL"
# tidy
rm(bldat,sidat,blockFiles,sineFiles)
#### retrieve RABL data ####
blockFiles2 <- dir("data/BLRA/Block/")
randomFiles <- dir("data/BLRA/Random/")
df <- data.frame(participant=character(), trial=numeric(), block=numeric(),
Target_pr=numeric(), Targ_side=numeric(), Name=character(),
key=character(), RT=numeric(), Message=character(), Difficulty=numeric(),
Block_Type=character())
# make the blocked data set #
bldat2 <- df
for (f in blockFiles2)
{
d = read.csv(paste("data/BLRA/Block/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*bl", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
bldat2 = rbind(bldat2, d)
}
rm(d)
# makes the random dataset #
radat <- df
for (f in randomFiles)
{
d = read.csv(paste("data/BLRA/Random/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*ra", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
radat = rbind(radat, d)
}
rm(d)
rm(df)
radat$Difficulty = sub(".*v", "", radat$Name)
radat$Difficulty = sub(".jpg*.", "", radat$Difficulty)
RABL_data <- rbind(bldat2,radat)
RABL_data$Group <- "RABL"
# tidy up
rm(radat,bldat2,blockFiles2,randomFiles,f)
# prevent overlapping and add site info
RABL_data$participant <- as.numeric(RABL_data$participant)
RABL_data$site <- "Aberdeen"
RABL_data$site[RABL_data$participant > 20] <- "Essex"
RABL_data$participant <- RABL_data$participant + 20
#### combine all data into one set ####
all_data <- rbind(SIBL_data,RABL_data)
# get informtation about correct judgements
all_data$correctT <- 0
all_data$correctT[all_data$key == " l" & all_data$Target_pr == 1] <- 1
all_data$correctT[all_data$key == " r" & all_data$Target_pr == 0] <- 1
# change Difficulty levels to the actual degree of variance #
all_data$Difficulty[all_data$Difficulty == 1.5] <- 120
all_data$Difficulty[all_data$Difficulty == 1.8] <- 100
all_data$Difficulty[all_data$Difficulty == 2.3] <- 78
all_data$Difficulty[all_data$Difficulty == 2.8] <- 64
all_data$Difficulty[all_data$Difficulty == 3.3] <- 54
all_data$Difficulty[all_data$Difficulty == 3.8] <- 47
all_data$Difficulty[all_data$Difficulty == 4.3] <- 41
# keep needed columns
all_data <- select(all_data, "participant", "Block_Type", "block", "trial", "Target_pr", "key", "Difficulty", "correctT", "RT", "site", "Group")
# mark trials to be removed due to incorrect key press
all_data$RT[all_data$key == " x"] <- NA
#### add in PRT ####
# this didn't work unique(all_data[c("block","Block_Type")])
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
count = 0
n_to_shift <- 1
for(Subject in people){
data_this_sub <- all_data[all_data$participant == Subject,]
nblocks <- unique(all_data$block)
for (block_no in nblocks){
count = count + 1 #just so we can ID the first time we run this - must be a better way than this
data_this_block <- data_this_sub[data_this_sub$block == block_no,] #separates each block
data_this_block$PRT <- shift(data_this_block$RT,n_to_shift)
data_this_block <- data_this_block[-seq(n_to_shift),] #removes first n_to_shift trials in block
if (count == 1)
{
all_data_with_PRT_bl <- data_this_block #same as before, makes new data set
}
if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
rm(list = ls())
#### retrieve SIBL data ####
blockFiles <- dir("data/BLSI/Block/")
sineFiles <- dir("data/BLSI/Sine/")
df <- data.frame(participant=character(), trial=numeric(), block=numeric(),
Target_pr=numeric(), Targ_side=numeric(), Name=character(),
key=character(), RT=numeric(), Message=character(), Difficulty=numeric(),
Block_Type=character())
# make the blocked data set #
bldat <- df
for (f in blockFiles)
{
d = read.csv(paste("data/BLSI/Block/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*bl", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
bldat = rbind(bldat, d)
}
rm(d)
# makes the sine dataset #
sidat <- df
for (f in sineFiles)
{
d = read.csv(paste("data/BLSI/sine/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*si", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
sidat = rbind(sidat, d)
}
rm(d)
rm(df)
sidat$Difficulty = sub(".*v", "", sidat$Name)
sidat$Difficulty = sub(".jpg*.", "", sidat$Difficulty)
# combine data
SIBL_data <- rbind(sidat,bldat)
# add site information
SIBL_data$participant <- as.numeric(SIBL_data$participant)
SIBL_data$site <- "Aberdeen"
SIBL_data$site[SIBL_data$participant > 20] <- "Essex"
SIBL_data$Group <- "SIBL"
# tidy
rm(bldat,sidat,blockFiles,sineFiles)
#### retrieve RABL data ####
blockFiles2 <- dir("data/BLRA/Block/")
randomFiles <- dir("data/BLRA/Random/")
df <- data.frame(participant=character(), trial=numeric(), block=numeric(),
Target_pr=numeric(), Targ_side=numeric(), Name=character(),
key=character(), RT=numeric(), Message=character(), Difficulty=numeric(),
Block_Type=character())
# make the blocked data set #
bldat2 <- df
for (f in blockFiles2)
{
d = read.csv(paste("data/BLRA/Block/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*bl", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
bldat2 = rbind(bldat2, d)
}
rm(d)
# makes the random dataset #
radat <- df
for (f in randomFiles)
{
d = read.csv(paste("data/BLRA/Random/", f, sep=""), sep = "\t", header = T)
names(d) = c("trial", "block", "Target_pr", "Target_side", "Name", "key", "RT", "Message", "Difficulty", "Block_Type")
d$participant = f
d$participant = sub(".*ra", "", d$participant)
d$participant = sub(".dat*.", "", d$participant)
radat = rbind(radat, d)
}
rm(d)
rm(df)
radat$Difficulty = sub(".*v", "", radat$Name)
radat$Difficulty = sub(".jpg*.", "", radat$Difficulty)
RABL_data <- rbind(bldat2,radat)
RABL_data$Group <- "RABL"
# tidy up
rm(radat,bldat2,blockFiles2,randomFiles,f)
# prevent overlapping and add site info
RABL_data$participant <- as.numeric(RABL_data$participant)
RABL_data$site <- "Aberdeen"
RABL_data$site[RABL_data$participant > 20] <- "Essex"
RABL_data$participant <- RABL_data$participant + 20
#### combine all data into one set ####
all_data <- rbind(SIBL_data,RABL_data)
# get informtation about correct judgements
all_data$correctT <- 0
all_data$correctT[all_data$key == " l" & all_data$Target_pr == 1] <- 1
all_data$correctT[all_data$key == " r" & all_data$Target_pr == 0] <- 1
# change Difficulty levels to the actual degree of variance #
all_data$Difficulty[all_data$Difficulty == 1.5] <- 120
all_data$Difficulty[all_data$Difficulty == 1.8] <- 100
all_data$Difficulty[all_data$Difficulty == 2.3] <- 78
all_data$Difficulty[all_data$Difficulty == 2.8] <- 64
all_data$Difficulty[all_data$Difficulty == 3.3] <- 54
all_data$Difficulty[all_data$Difficulty == 3.8] <- 47
all_data$Difficulty[all_data$Difficulty == 4.3] <- 41
# keep needed columns
all_data <- select(all_data, "participant", "Block_Type", "block", "trial", "Target_pr", "key", "Difficulty", "correctT", "RT", "site", "Group")
# mark trials to be removed due to incorrect key press
all_data$RT[all_data$key == " x"] <- NA
#### add in PRT ####
# this didn't work unique(all_data[c("block","Block_Type")])
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
count = 0
n_to_shift <- 1
for(Subject in people){
data_this_sub <- all_data[all_data$participant == Subject,]
nblocks <- unique(all_data$block)
for (block_no in nblocks){
count = count + 1 #just so we can ID the first time we run this - must be a better way than this
data_this_block <- data_this_sub[data_this_sub$block == block_no,] #separates each block
data_this_block$PRT <- shift(data_this_block$RT,n_to_shift)
data_this_block <- data_this_block[-seq(n_to_shift),] #removes first n_to_shift trials in block
if (count == 1)
{
all_data_with_PRT_bl <- data_this_block #same as before, makes new data set
}
if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
shift <- function(x,n){
c(rep(NA, n),x[seq(length(x)-n)])
}
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
count = 0
n_to_shift <- 1
for(Subject in people){
data_this_sub <- all_data[all_data$participant == Subject,]
nblocks <- unique(all_data$block)
for (block_no in nblocks){
count = count + 1 #just so we can ID the first time we run this - must be a better way than this
data_this_block <- data_this_sub[data_this_sub$block == block_no,] #separates each block
data_this_block$PRT <- shift(data_this_block$RT,n_to_shift)
data_this_block <- data_this_block[-seq(n_to_shift),] #removes first n_to_shift trials in block
if (count == 1)
{
all_data_with_PRT_bl <- data_this_block #same as before, makes new data set
}
if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
View(all_data_with_PRT_bl)
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
peaopl
people
meax(people)
max(people)
rm(all_data_with_PRT_bl)
people <- seq(max(as.numeric(all_data$participant))) #This will need to be changed to the total number of participants...
count = 0
n_to_shift <- 1
for(Subject in people){
data_this_sub <- all_data[all_data$participant == Subject,]
nblocks <- unique(all_data$block)
for (block_no in nblocks){
count = count + 1 #just so we can ID the first time we run this - must be a better way than this
data_this_block <- data_this_sub[data_this_sub$block == block_no,] #separates each block
data_this_block$PRT <- shift(data_this_block$RT,n_to_shift)
data_this_block <- data_this_block[-seq(n_to_shift),] #removes first n_to_shift trials in block
if (count == 1)
{
all_data_with_PRT_bl <- data_this_block #same as before, makes new data set
}
if (count > 1)
{
all_data_with_PRT_bl <- rbind(all_data_with_PRT_bl,data_this_block)
}
}
}
rm(data_this_block)
rm(data_this_sub)
nblocks
unique(all_data[c("block","Block_Typ3")])
unique(all_data[c("block","Block_Type")])
peopla
people
View(all_data_with_PRT_bl)
summary(all_data_with_PRT_bl)
summary(all_data)
people
summary(people)
unique(all_data$participant)
levels(all_data$participant)
temp <- all_data
temp$participant <- as.factor(temp$participant)
levels(temp$participant)
View(RABL_data)
View(SIBL_data)
View(all_data)
length(levels(temp$participant))
length(levels(all_data$participant))
read_delim(paste("data/BLSI/Block/", f, sep=""), sep = "\t", header = T)
read_delim(paste("data/BLSI/Block/", f, sep=""))
read_delim(paste("data/BLSI/Block/", f, sep=""),delim = "\t")
rm(list = ls())
