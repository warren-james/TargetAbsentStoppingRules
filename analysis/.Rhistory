colnames(bl) <- c("lower", "upper", "block_type")
bl <- as.data.frame(cbind(bl_avg_smt, bl_avg_bigt))
bl$block_type <- "Blocked"
colnames(bl) <- c("lower", "upper", "block_type")
si <- as.data.frame(cbind(si_avg_smt, si_avg_bigt))
si$siock_type <- "Sine Wave"
colnames(si) <- c("lower", "upper", "block_type")
ra <- as.data.frame(cbind(ra_avg_smt, ra_avg_bigt))
ra$raock_type <- "Random"
colnames(ra) <- c("lower", "upper", "block_type")
temp <- rbind(bl, ra, si)
View(temp)
as.data.frame(c(bl_avg_smt,ra_avg_smt,si_avg_smt))
bl_avg_smt <- exp(post$a) + post$b_theta * 0.12
bl_avg_smt <- as.data.frame(bl_avg_smt)
bl_avg_smt$theta <- 0.12
ra_avg_smt <- exp(post$a + post$b_isra) + post$b_theta * 0.12
ra_avg_smt <- as.data.frame(ra_avg_smt)
ra_avg_smt$theta <- 0.12
si_avg_smt <- exp(post$a + post$b_issi) + post$b_theta * 0.12
si_avg_smt <- as.data.frame(si_avg_smt)
si_avg_smt$theta <- 0.12
View(ra)
View(ra_avg_smt)
bl_avg_smt <- exp(post$a) + post$b_theta * 0.12
bl_avg_smt <- as.data.frame(bl_avg_smt)
bl_avg_smt$theta <- 0.12
colnames(bl_avg_smt) <- c("intercept", "theta")
ra_avg_smt <- exp(post$a + post$b_isra) + post$b_theta * 0.12
ra_avg_smt <- as.data.frame(ra_avg_smt)
ra_avg_smt$theta <- 0.12
colnames(ra_avg_smt) <- c("intercept", "theta")
si_avg_smt <- exp(post$a + post$b_issi) + post$b_theta * 0.12
si_avg_smt <- as.data.frame(si_avg_smt)
si_avg_smt$theta <- 0.12
colnames(si_avg_smt) <- c("intercept", "theta")
View(ra_avg_smt)
bl <- as.data.frame(rbind(bl_avg_smt, bl_avg_bigt))
bl$block_type <- "Blocked"
View(bl)
si <- as.data.frame(cbind(si_avg_smt, si_avg_bigt))
si$siock_type <- "Sine Wave"
ra <- as.data.frame(cbind(ra_avg_smt, ra_avg_bigt))
ra$raock_type <- "Random"
temp <- rbind(bl, ra, si)
bl_avg_smt <- exp(post$a) + post$b_theta * 0.12
bl_avg_smt <- as.data.frame(bl_avg_smt)
bl_avg_smt$theta <- 0.12
colnames(bl_avg_smt) <- c("intercept", "theta")
ra_avg_smt <- exp(post$a + post$b_isra) + post$b_theta * 0.12
ra_avg_smt <- as.data.frame(ra_avg_smt)
ra_avg_smt$theta <- 0.12
colnames(ra_avg_smt) <- c("intercept", "theta")
si_avg_smt <- exp(post$a + post$b_issi) + post$b_theta * 0.12
si_avg_smt <- as.data.frame(si_avg_smt)
si_avg_smt$theta <- 0.12
colnames(si_avg_smt) <- c("intercept", "theta")
# upper
bl_avg_bigt <- exp(post$a) + post$b_theta * 0.88
bl_avg_bigt <- as.data.frame(bl_avg_bigt)
bl_avg_bigt$theta <- 0.88
colnames(bl_avg_bigt) <- c("intercept", "theta")
ra_avg_bigt <- exp(post$a + post$b_isra) + post$b_theta * 0.88
ra_avg_bigt <- as.data.frame(ra_avg_bigt)
ra_avg_bigt$theta <- 0.88
colnames(ra_avg_bigt) <- c("intercept", "theta")
si_avg_bigt <- exp(post$a + post$b_issi) + post$b_theta * 0.88
si_avg_bigt <- as.data.frame(si_avg_bigt)
si_avg_bigt$theta <- 0.88
colnames(si_avg_bigt) <- c("intercept", "theta")
# make data sets of these
bl <- as.data.frame(rbind(bl_avg_smt, bl_avg_bigt))
bl$block_type <- "Blocked"
si <- as.data.frame(cbind(si_avg_smt, si_avg_bigt))
si$block_type <- "Sine Wave"
ra <- as.data.frame(cbind(ra_avg_smt, ra_avg_bigt))
ra$block_type <- "Random"
temp <- rbind(bl, ra, si)
View(ra)
rm(bl, ra,si)
temp <- rbind(bl, ra, si)
bl_avg_smt <- exp(post$a) + post$b_theta * 0.12
bl_avg_smt <- as.data.frame(bl_avg_smt)
bl_avg_smt$theta <- 0.12
colnames(bl_avg_smt) <- c("intercept", "theta")
ra_avg_smt <- exp(post$a + post$b_isra) + post$b_theta * 0.12
ra_avg_smt <- as.data.frame(ra_avg_smt)
ra_avg_smt$theta <- 0.12
colnames(ra_avg_smt) <- c("intercept", "theta")
si_avg_smt <- exp(post$a + post$b_issi) + post$b_theta * 0.12
si_avg_smt <- as.data.frame(si_avg_smt)
si_avg_smt$theta <- 0.12
colnames(si_avg_smt) <- c("intercept", "theta")
# upper
bl_avg_bigt <- exp(post$a) + post$b_theta * 0.88
bl_avg_bigt <- as.data.frame(bl_avg_bigt)
bl_avg_bigt$theta <- 0.88
colnames(bl_avg_bigt) <- c("intercept", "theta")
ra_avg_bigt <- exp(post$a + post$b_isra) + post$b_theta * 0.88
ra_avg_bigt <- as.data.frame(ra_avg_bigt)
ra_avg_bigt$theta <- 0.88
colnames(ra_avg_bigt) <- c("intercept", "theta")
si_avg_bigt <- exp(post$a + post$b_issi) + post$b_theta * 0.88
si_avg_bigt <- as.data.frame(si_avg_bigt)
si_avg_bigt$theta <- 0.88
colnames(si_avg_bigt) <- c("intercept", "theta")
# make data sets of these
bl <- as.data.frame(rbind(bl_avg_smt, bl_avg_bigt))
bl$block_type <- "Blocked"
si <- as.data.frame(cbind(si_avg_smt, si_avg_bigt))
si$block_type <- "Sine Wave"
ra <- as.data.frame(cbind(ra_avg_smt, ra_avg_bigt))
ra$block_type <- "Random"
View(si)
si <- as.data.frame(rbind(si_avg_smt, si_avg_bigt))
si$block_type <- "Sine Wave"
ra <- as.data.frame(rbind(ra_avg_smt, ra_avg_bigt))
ra$block_type <- "Random"
temp <- rbind(bl, ra, si)
View(temp)
plt <- ggplot(temp, aes(x = theta, y = intercept, fill = block_type))
okt
plt
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type))
plt <- ggplot(temp, aes(x = theta, y = intercept, fill = block_type))
plt <- plt + geom_ribbon(data = temp,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type))
plt
rm(plt)
plt <- ggplot(temp, aes(x = theta, y = intercept, fill = block_type))
plt <- plt + geom_point()
plt
temp$block_type <- as.factor(temp$block_type)
plt <- ggplot(temp, aes(x = theta, y = intercept, fill = block_type))
plt <- plt + geom_point()
plt
rm(plt)
plt <- ggplot(temp, aes(x = theta, y = intercept, colour = block_type))
plt <- plt + geom_point()
plt
rm(plt)
plt <- ggplot(temp, aes(x = theta, y = intercept, colour = block_type))
plt <- plt + geom_point(aes(jitter = 0.5))
rm(plt)
plt <- ggplot(temp, aes(x = theta, y = intercept, colour = block_type))
plt <- plt + geom_jitter()
plt
plt <- ggplot(temp, aes(x = theta, y = intercept, colour = block_type))
plt <- plt + geom_ribbon(data = temp,
aes(x = theta, fill = block_type))
plt
mu.block <- post$a
mu.sine <- post$a + post$b_issi
mu.rand <- post$a + post$b_isra
mu.theta <- post$b_theta
precis(data.frame(mu.block,mu.sine, mu.rand))
precis(post$a)
precis(m_ta_only_temp)
HPDI(post$a)
tmep <- HPDI(post$a)
HPDI(mu.sine)
HPDI(mu.rand)
exp(HPDI(mu.block)*0.12)
exp(0.36)
exp(HPDI(mu.block))*0.12
exp(HPDI(mu.block)*0.12)
exp(HPDI(mu.block))*exp(0.12)
exp(HPDI)*exp(0.12)
exp(HPDI(post$a))*exp(0.12)
temp <- as.data.frame(block_type = rep(c("Blocked", "Sine Wave", "Random"), each = 2),
theta =   rep(c(0.12, 0.88), length(unique(df$block_type))))
temp <- as.data.frame(block_type = rep(c("Blocked", "Sine Wave", "Random"), each = 2),
theta =   rep(c(0.12, 0.88), each = 3))
temp <- list(block_type = rep(c("Blocked", "Sine Wave", "Random"), each = 2),
theta =   rep(c(0.12, 0.88), each = 3))
View(temp)
length(1:3)
temp <- list(block_type = rep(c("Blocked", "Sine Wave", "Random"), each = 2),
theta =   rep(c(0.12, 0.88), 3))
View(temp)
temp <- list(block_type = rep(c("Blocked", "Sine Wave", "Random"), each = 2),
theta =   rep(c(0.12, 0.88), length(1:3)))
View(temp)
View(temp)
as.data.frame(temp)
temp <- as.data.frame(temp)
temp
blocked$lower <- exp(HPDI(mu.block))*exp(0.12)
blocked <- exp(HPDI(mu.block))*exp(0.12)
as.data.frame(blocked)
temp2 <- as.data.frame(blocked)
View(temp2)
temp$lower[temp$block_type == "Blocked"] <- exp(HPDI(mu.block))*exp(temp$theta)[1,]
temp$lower[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[1,]
(exp(HPDI(mu.block))*exp(temp$theta))[1,]
(exp(HPDI(mu.block))*exp(temp$theta))
(exp(HPDI(mu.block))*exp(temp$theta))[,1]
(exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$lower[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[2]
temp$lower[temp$block_type == "Random"] <- (exp(HPDI(mu.rand))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Random"] <- (exp(HPDI(mu.rand))*exp(temp$theta))[2]
temp$lower[temp$block_type == "Sine Wave"] <- (exp(HPDI(mu.sine))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Sine Wave"] <- (exp(HPDI(mu.sine))*exp(temp$theta))[2]
View(temp)
(exp(HPDI(mu.block))*exp(temp$theta))[1]
(exp(HPDI(mu.block))*exp(0.12))[1]
(exp(HPDI(mu.block))*exp(0.12))[2]
(exp(HPDI(mu.block))*exp(0.88))[2]
c(temp$lower[temp$block_type == "Blocked"],temp$upper[temp$block_type == "Blocked"])  <- (exp(HPDI(mu.block))*exp(temp$theta))[c(1,2)]
temp$lower[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[2]
temp$lower[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(0.12))[1]
temp$upper[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(0.12))[2]
for(i in 1:2){
temp$lower[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(0.12))[1]
temp$upper[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(0.12))[2]
}
for(i in 1:2){
temp$lower[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Blocked"] <- (exp(HPDI(mu.block))*exp(temp$theta))[2]
}
temp$lower[temp$block_type == "Blocked" & temp$theta = 0.12] <- (exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Blocked" & temp$theta = 0.12] <- (exp(HPDI(mu.block))*exp(temp$theta))[2]
temp$lower[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(temp$theta))[2]
View(temp)
temp$lower[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(temp$theta))[1]
temp$upper[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(temp$theta))[2]
temp$lower[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(0.12))[1]
temp$upper[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(0.12))[2]
temp$lower[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(0.12))[1]
temp$upper[temp$block_type == "Blocked" & temp$theta == 0.12] <- (exp(HPDI(mu.block))*exp(0.12))[2]
temp$lower[temp$block_type == "Sine Wave" & temp$theta == 0.12] <- (exp(HPDI(mu.sine))*exp(0.12))[1]
temp$upper[temp$block_type == "Sine Wave" & temp$theta == 0.12] <- (exp(HPDI(mu.sine))*exp(0.12))[2]
temp$lower[temp$block_type == "Random" & temp$theta == 0.12] <- (exp(HPDI(mu.rand))*exp(0.12))[1]
temp$upper[temp$block_type == "Random" & temp$theta == 0.12] <- (exp(HPDI(mu.rand))*exp(0.12))[2]
temp$lower[temp$block_type == "Blocked" & temp$theta == 0.88] <- (exp(HPDI(mu.block))*exp(0.88))[1]
temp$upper[temp$block_type == "Blocked" & temp$theta == 0.88] <- (exp(HPDI(mu.block))*exp(0.88))[2]
temp$lower[temp$block_type == "Sine Wave" & temp$theta == 0.88] <- (exp(HPDI(mu.sine))*exp(0.88))[1]
temp$upper[temp$block_type == "Sine Wave" & temp$theta == 0.88] <- (exp(HPDI(mu.sine))*exp(0.88))[2]
temp$lower[temp$block_type == "Random" & temp$theta == 0.88] <- (exp(HPDI(mu.rand))*exp(0.88))[1]
temp$upper[temp$block_type == "Random" & temp$theta == 0.88] <- (exp(HPDI(mu.rand))*exp(0.88))[2]
params <- temp
model_lines <- temp
plt <- ggplot()
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper))
plt
plt <- ggplot()
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type))
plt
plt <- ggplot()
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.3)
plt
plt <- ggplot()
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.4)
plt
(exp(HPDI(mu.block))*exp(0.12))
(exp(HPDI(mu.block)*0.12)
)
(exp(HPDI(mu.block*0.12)))
exp(0.12)
precis(data.frame(mu.block,mu.sine, mu.rand))
precis(m_ta_only_temp)
exp(0.44)
0.12*0.44
model_lines$avg <- (temp$lower + temp$upper)/2
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = intercept, x = theta, colour = avg))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.4)
plt
head(model_lines)
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg, x = theta, colour = avg))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.4)
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg, x = theta, colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.4)
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg, x = theta, colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.3)
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg, x = theta, colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.3)
plt <- plt + ggtitle("Model outputs for Block Type treated as a fixed effect") +
labs(x = "Theta", y = "RT")
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg, x = theta, colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta, ymin = lower, ymax = upper, fill = block_type), alpha = 0.3)
plt <- plt + ggtitle("Model output for Block Type treated as a fixed effect") +
labs(x = "Theta", y = "RT", colour = "Block Type")
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg,
x = theta,
fill = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta,
ymin = lower,
ymax = upper,
fill = block_type),
alpha = 0.3)
plt <- plt + ggtitle("Model output for Block Type treated as a fixed effect") +
labs(x = "Theta",
y = "RT",
fill = "Block Type")
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg,
x = theta,
colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta,
ymin = lower,
ymax = upper,
colour = block_type),
alpha = 0.3)
plt <- plt + ggtitle("Model output for Block Type treated as a fixed effect") +
labs(x = "Theta",
y = "RT",
colour = "Block Type")
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg,
x = theta,
colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta,
ymin = lower,
ymax = upper,
fill = block_type),
alpha = 0.3)
plt <- plt + ggtitle("Model output for Block Type treated as a fixed effect") +
labs(x = "Theta",
y = "RT",
colour = "Block Type")
plt
plt <- ggplot(model_lines)
plt <- plt + geom_line(aes(y = avg,
x = theta,
colour = block_type))
plt <- plt + geom_ribbon(data = model_lines,
aes(x = theta,
ymin = lower,
ymax = upper,
fill = block_type),
alpha = 0.3)
plt <- plt + ggtitle("Model output for Block Type treated as a fixed effect") +
labs(x = "Theta",
y = "RT",
colour = "Block Type",
fill = "Block Type")
plt
rm(list = ls())
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
df$difficulty <- round(df$difficulty, digits = 1)
toberemoved <- which(df$site == "Essex" & df$group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
total_observations <- length(df$rt)
# get average number of trials
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
total_observations
trials_per_participant = mean(number_of_trials$num_trials)
trials_per_participant
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
total_observations_nar
trials_per_participant_nar
trials_per_block_plt = ggplot(number_of_trials, aes(num_trials))
trials_per_block_plt = trials_per_block_plt + geom_bar()
trials_per_block_plt = trials_per_block_plt + xlab("Number of trials")
trials_per_block_plt = trials_per_block_plt + ylab("No. participants")
temp <- group_by(df, participant,block_type,group)
number_of_trials_2 <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_total_plt = ggplot(number_of_trials_2, aes(num_trials))
trials_total_plt = trials_total_plt + geom_bar()
trials_total_plt = trials_total_plt + xlab("Number of trials")
trials_total_plt = trials_total_plt + ylab("No. participants")
trials_per_block_plt
trials_total_plt
# so mean and median rt by group, block type, difficulty, and Ta vs Tp
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
mean_rt_plot
median_rt_plot
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats_acc = summarise(temp, mean_correct = mean(correct),
median_correct = median(correct),
sdev = sd(correct),
N = length(correct),
se = sdev/sqrt(N),
upper_mean = mean_correct + se,
lower_mean = mean_correct - se,
upper_median = median_correct + se,
lower_median = median_correct - se)
rm(temp)
mean_acc_plot = ggplot(desc_stats_acc, aes(difficulty, mean_correct, colour = block_type))
mean_acc_plot = mean_acc_plot + geom_point()
mean_acc_plot = mean_acc_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_acc_plot = mean_acc_plot + facet_grid(group~targ_pr)
mean_acc_plot
# make targ_pr a factor
df$targ_pr <- as.factor(df$targ_pr)
# make separate density plot data frame
dense_data <- df
# make difficulty a factor just for this
dense_data$difficulty <- as.factor(dense_data$difficulty)
density_plot_RABL = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = targ_pr))
density_plot_RABL = density_plot_RABL + geom_density(alpha = 0.1)
density_plot_RABL = density_plot_RABL + facet_wrap(~block_type)
density_plot_RABL = density_plot_RABL + ggtitle("RABL group")
density_plot_SIBL = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = targ_pr))
density_plot_SIBL = density_plot_SIBL + geom_density(alpha = 0.1)
density_plot_SIBL = density_plot_SIBL + facet_wrap(~block_type)
density_plot_SIBL = density_plot_SIBL + ggtitle("SIBL group")
density_plot_RABL
density_plot_SIBL
density_plot_RABL_diff = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = difficulty))
density_plot_RABL_diff = density_plot_RABL_diff + geom_density(alpha = 0.1)
density_plot_RABL_diff = density_plot_RABL_diff + facet_grid(targ_pr~block_type)
density_plot_RABL_diff = density_plot_RABL_diff + ggtitle("RABL group")
density_plot_SIBL_diff = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = difficulty))
density_plot_SIBL_diff = density_plot_SIBL_diff + geom_density(alpha = 0.1)
density_plot_SIBL_diff = density_plot_SIBL_diff + facet_grid(targ_pr~block_type)
density_plot_SIBL_diff = density_plot_SIBL_diff + ggtitle("SIBL group")
density_plot_RABL_diff
density_plot_SIBL_diff
# centre p_rt
df$c_p_rt <- df$p_rt - mean(df$p_rt)
# change difficulty name
#colnames(df)[7] <- "theta"
#rescale difficulty for the models
df$theta <- round(df$difficulty/pi, digits = 3)
# create a centred version
df$theta_c <- df$theta - mean(df$theta)
df$targ_pr <- as.numeric(df$targ_pr)
# This causes 0 to be 2, so we need to change that back for dummy variables
df$targ_pr[df$targ_pr == 2] <- 0
df$isra <- ifelse(df$block_type == "random", 1,0)
df$issi <- ifelse(df$block_type == "sinewave",1,0)
df$participant <- as.factor(df$participant)
df$participant <- as.numeric(df$participant)
df_correct_only <- df[df$correct == 1,]
# remove everything but the df
rm(list=ls()[!(ls() %in% c("df","df_correct_only"))])
# Save only the new data frame
save(df, df_correct_only, file = "scratch/processed_data_nar.rda")
# add column
df$TATP <- 0
# define when it's TA or TP
df$TATP[df$key == "l"] <- "TP"
df$TATP[df$key == "r"] <- "TA"
# version with only TA judgements
df_TA <- df[df$TATP == "TA",]
# save this
save(df_TA, file = "scratch/processed_data_nar_TA.rda")
temp <- runif(0,100)
plot(temp)
v <- runif(100,1,5)
plot(v)
curve(runif(100,1,5), from=0, to=7)
curve(dunif(x,1,5), from=0, to=7)
curve(dunif(x,0,10), from=0, to=7)
curve(dunif(x,0,10), from=-1, to=11)
curve(dlnorm(x,0,10), from=-1, to=11)
curve(dlnorm(x,0.5,10), from=-1, to=11)
curve(dlnorm(x,0.7,10), from=-1, to=11)
curve(dlnorm(x,1,10), from=-1, to=11)
curve(dunif(x,0,10), from=-1, to=11)
