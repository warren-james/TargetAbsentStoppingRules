simDat <- data.frame(a=numeric(), rt=numeric())
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i] <- cbind(a,rt=abs(rt))
}
simDat <- data.frame(a=numeric(), rt=numeric())
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i] <- cbind(a = a,rt=abs(rt))
}
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i] <- data.frame(a = a,rt=abs(rt))
}
View(simDat)
View(simDat)
simDat <- data.frame(a=numeric(), rt=numeric())
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
}
View(simDat)
simDat <- data.frame(a=numeric(), rt=numeric())
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat$response = rt>0
}
View(simDat)
simDat>0
p_down <- 0.33
# function(p_up=0.67, threshold=10, mu_quitTime=log(50), sigma_quitTime=.5)
# mu_quitTime = 7.822861
simTrial <- function(p_up=0.2, threshold=10, mu_quitTime=log(50), sigma_quitTime=.7)
{
p_down = 1-p_up
quitTime <- exp(rnorm(n=1, mean=mu_quitTime, sd=sigma_quitTime^2))
print(quitTime)
n <-quitTime
# for speed, pre-gen a load of random numbers
walk <-runif(min=0, max=1, n=n)
# generate a random walk for the n samples
walk[walk<=p_down] <- -1
# This if statement should switch between the up step being 10 or 1 depending on whether it's TA or TP
#TP <- runif(min=0, max=1, n=n)
#round(TP)
#walk[walk>p_down & TP>0.5]  <-  8
#walk[walk>p_down & TP<0.5]  <-  1
walk[walk>p_down] <- a
walk <- cumsum(walk)
respondTP = max(walk)>threshold
if (respondTP) {
rt <- min(which(walk>threshold))
} else {
rt = -quitTime
}
return(rt)
}
simDat <- replicate(1000, simTrial())
df <- data.frame(rt=abs(simDat))
df$response = simDat>0
View(df)
a <- 1
p_down <- 0.33
# function(p_up=0.67, threshold=10, mu_quitTime=log(50), sigma_quitTime=.5)
# mu_quitTime = 7.822861
simTrial <- function(p_up=0.2, threshold=10, mu_quitTime=log(50), sigma_quitTime=.7)
{
p_down = 1-p_up
quitTime <- exp(rnorm(n=1, mean=mu_quitTime, sd=sigma_quitTime^2))
print(quitTime)
n <-quitTime
# for speed, pre-gen a load of random numbers
walk <-runif(min=0, max=1, n=n)
# generate a random walk for the n samples
walk[walk<=p_down] <- -1
# This if statement should switch between the up step being 10 or 1 depending on whether it's TA or TP
#TP <- runif(min=0, max=1, n=n)
#round(TP)
#walk[walk>p_down & TP>0.5]  <-  8
#walk[walk>p_down & TP<0.5]  <-  1
walk[walk>p_down] <- a
walk <- cumsum(walk)
respondTP = max(walk)>threshold
if (respondTP) {
rt <- min(which(walk>threshold))
} else {
rt = -quitTime
}
return(rt)
}
simDat <- replicate(1000, simTrial())
df <- data.frame(rt=abs(simDat))
df$response = simDat>0
View(df)
a<- 8
simDat <- replicate(1000, simTrial())
df <- data.frame(rt=abs(simDat))
df$response = simDat>0
View(df)
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
simDat <- data.frame(a=numeric(), rt=numeric(), response=logical())
for(i in seq(1,1000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
View(simDat)
simDat[simDat$a = 8 & simDat$response = FALSE]
simDat[simDat$a = 8 & simDat$response = FALSE,]
simDat[simDat$a == 8 & simDat$response == FALSE,]
simDat[simDat$a == 8 & simDat$response == TRUE,]
simDat[simDat$a == 1 & simDat$response == TRUE,]
simDat[simDat$a == 1 & simDat$response == FALSE,]
for(i in seq(1,2000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
View(simDat)
simDat[simDat$a == 8] <- TP
simDat[simDat$a == 1] <- TA
simDat[simDat$a == 8] <- "TP"
simDat[simDat$a == 1] <- "TA"
simDat <- data.frame(a=numeric(), rt=numeric(), response=logical())
for(i in seq(1,2000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
simDat[simDat$a == 8] <- "TP"
simDat[simDat$a == 1] <- "TA"
View(simDat)
simDat$a[simDat$a == 8] <- "TP"
simDat$a[simDat$a == 1] <- "TA"
View(simDat)
simDat <- data.frame(a=numeric(), rt=numeric(), response=logical())
for(i in seq(1,2000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
} else {
a <- 1
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
simDat$a[simDat$a == 8] <- "TP"
simDat$a[simDat$a == 1] <- "TA"
plt <- ggplot(simDat, aes(x=rt, fill=response)) + geom_density(alpha=0.5) + facet_wrap(~a)
plt
simTrial <- function(p_up=b, threshold=10, mu_quitTime=log(50), sigma_quitTime=.7)
{
p_down = 1-p_up
quitTime <- exp(rnorm(n=1, mean=mu_quitTime, sd=sigma_quitTime^2))
print(quitTime)
n <-quitTime
# for speed, pre-gen a load of random numbers
walk <-runif(min=0, max=1, n=n)
# generate a random walk for the n samples
walk[walk<=p_down] <- -1
walk[walk>p_down] <- a
walk <- cumsum(walk)
respondTP = max(walk)>threshold
if (respondTP) {
rt <- min(which(walk>threshold))
} else {
rt = -quitTime
}
return(rt)
}
for(i in seq(1,2000)) {
temp <- runif(max=1, min=0, n=1)
if(temp >0.5) {
a <- 8
b <- 0.2
} else {
a <- 1
b <- 0.5
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
simDat$a[simDat$a == 8] <- "TP"
simDat$a[simDat$a == 1] <- "TA"
plt <- ggplot(simDat, aes(x=rt, fill=response)) + geom_density(alpha=0.5) + facet_wrap(~a)
plt
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
install.packages("rstan")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
sample(1:2, 36)
sample(1:2, 36, replace = T)
sample(1:4, 32, replace = T)
sample(1:4, 32, replace = T)
library(rethinking)
load("scratch/processed_data_nar.rda")
setwd("E:/Github/TargetAbsentStoppingRules/analysis")
load("scratch/processed_data_nar.rda")
test <- as.data.frame(df_correct_only)
m_tp_diff_1 <- map(
alist(
rt ~ dnorm( mu , sigma ) ,
mu <- a + b_diff*difficulty + b_tp*targ_pr ,
a ~ dnorm( 1 , 10 ) ,
b_diff ~ dnorm( 1 , 10 ) ,
b_tp ~ dnorm( 1 , 10 ) ,
sigma ~ dnorm( 0 , 1 )
) ,
data = test)
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
df$difficulty <- round(df$difficulty, digits = 1)
toberemoved <- which(df$site == "Essex" & df$ group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
rm(list = ls())
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
df$difficulty <- round(df$difficulty, digits = 1)
toberemoved <- which(df$site == "Essex" & df$ group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
total_observations <- length(df$rt)
# get average number of trials
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
total_observations
trials_per_participant = mean(number_of_trials$num_trials)
trials_per_participant
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
total_observations_nar
trials_per_participant_nar
trials_per_block_plt = ggplot(number_of_trials, aes(num_trials))
trials_per_block_plt = trials_per_block_plt + geom_bar()
trials_per_block_plt = trials_per_block_plt + xlab("Number of trials")
trials_per_block_plt = trials_per_block_plt + ylab("No. participants")
temp <- group_by(df, participant,block_type,group)
number_of_trials_2 <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_total_plt = ggplot(number_of_trials_2, aes(num_trials))
trials_total_plt = trials_total_plt + geom_bar()
trials_total_plt = trials_total_plt + xlab("Number of trials")
trials_total_plt = trials_total_plt + ylab("No. participants")
trials_per_block_plt
trials_total_plt
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
rm(list = ls())
dir()
dir("scratch")
test <- load("scratch/processed_data.rda")
head(test)
head(df)
rm(list = ls)
rm(list = ls())
setwd("E:/Github/TargetAbsentStoppingRules/analysis")
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
head(df)
df$difficulty <- round(df$difficulty, digits = 1)
head(df)
toberemoved <- which(df$site == "Essex" & df$ group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
head(df)
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
head(df)
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
total_observations
total_observations <- length(df$rt)
# get average number of trials
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
total_observations
trials_per_participant = mean(number_of_trials$num_trials)
trials_per_participant
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
trials_per_block_plt = ggplot(number_of_trials, aes(num_trials))
trials_per_block_plt = trials_per_block_plt + geom_bar()
trials_per_block_plt = trials_per_block_plt + xlab("Number of trials")
trials_per_block_plt = trials_per_block_plt + ylab("No. participants")
temp <- group_by(df, participant,block_type,group)
number_of_trials_2 <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_total_plt = ggplot(number_of_trials_2, aes(num_trials))
trials_total_plt = trials_total_plt + geom_bar()
trials_total_plt = trials_total_plt + xlab("Number of trials")
trials_total_plt = trials_total_plt + ylab("No. participants")
head(df)
trials_per_block_plt
trials_total_plt
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
head(desc_stats)
mean_rt_plot
median_rt_plot
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats_acc = summarise(temp, mean_correct = mean(correct),
median_correct = median(correct),
sdev = sd(correct),
N = length(correct),
se = sdev/sqrt(N),
upper_mean = mean_correct + se,
lower_mean = mean_correct - se,
upper_median = median_correct + se,
lower_median = median_correct - se)
rm(temp)
mean_acc_plot = ggplot(desc_stats_acc, aes(difficulty, mean_correct, colour = block_type))
mean_acc_plot = mean_acc_plot + geom_point()
mean_acc_plot = mean_acc_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_acc_plot = mean_acc_plot + facet_grid(group~targ_pr)
# make targ_pr a factor
df$targ_pr <- as.factor(df$targ_pr)
# make separate density plot data frame
dense_data <- df
# make difficulty a factor just for this
dense_data$difficulty <- as.factor(dense_data$difficulty)
density_plot_RABL = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = targ_pr))
density_plot_RABL = density_plot_RABL + geom_density(alpha = 0.1)
density_plot_RABL = density_plot_RABL + facet_wrap(~block_type)
density_plot_RABL = density_plot_RABL + ggtitle("RABL group")
density_plot_SIBL = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = targ_pr))
density_plot_SIBL = density_plot_SIBL + geom_density(alpha = 0.1)
density_plot_SIBL = density_plot_SIBL + facet_wrap(~block_type)
density_plot_SIBL = density_plot_SIBL + ggtitle("SIBL group")
density_plot_RABL
density_plot_SIBL
density_plot_RABL_diff = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = difficulty))
density_plot_RABL_diff = density_plot_RABL_diff + geom_density(alpha = 0.1)
density_plot_RABL_diff = density_plot_RABL_diff + facet_grid(targ_pr~block_type)
density_plot_RABL_diff = density_plot_RABL_diff + ggtitle("RABL group")
density_plot_SIBL_diff = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = difficulty))
density_plot_SIBL_diff = density_plot_SIBL_diff + geom_density(alpha = 0.1)
density_plot_SIBL_diff = density_plot_SIBL_diff + facet_grid(targ_pr~block_type)
density_plot_SIBL_diff = density_plot_SIBL_diff + ggtitle("SIBL group")
density_plot_RABL_diff
density_plot_SIBL_diff
# centre difficulty
df$c_difficulty <- df$difficulty - mean(df$difficulty)
# centre p_rt
df$c_p_rt <- df$p_rt - mean(df$p_rt)
df$targ_pr <- as.numeric(df$targ_pr)
df_correct_only <- df[df$correct == 1,]
# remove everything but the df
rm(list=ls()[!(ls() %in% c("df","df_correct_only"))])
# Save only the new data frame
save(df, df_correct_only, file = "scratch/processed_data_nar.rda")
rm(list = ls())
library(rethinking)
#library(tidyverse)
load("scratch/processed_data_nar.rda")
test <- as.data.frame(df_correct_only)
m_tp_diff_1 <- map(
alist(
rt ~ dnorm( mu , sigma ) ,
mu <- a + b_diff*difficulty + b_tp*targ_pr ,
a ~ dnorm( 1 , 10 ) ,
b_diff ~ dnorm( 1 , 10 ) ,
b_tp ~ dnorm( 1 , 10 ) ,
sigma ~ dnorm( 0 , 1 )
) ,
data = test)
