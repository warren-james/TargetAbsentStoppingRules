}
#### retrieve RABL data ####
block_files <- mixedsort(dir("../data/BLRA/Block/"))
random_files <- mixedsort(dir("../data/BLRA/Random/"))
# assign a so it's large enough
# hardcoded... is there a better way?
a <- 35
for (f in block_files) {
d <- read.csv(
paste("../data/BLRA/Block/", f, sep=""),
sep = "\t", header = T)
names(d) <-import_names
d$participant <- a
a <- a + 1
# assign group factor
d$group = "RABL"
# add to main dataframe
df = bind_rows(df, d)
}
a <- 35
for (f in random_files) {
d = read.csv(
paste("../data/BLRA/Random/", f, sep=""),
sep = "\t", header = T)
names(d) <-import_names
# extract participant id number from filename
# d$participant <- extract_participant_id(f)
d$participant <- a
a <- a + 1
# extract difficulty
d <- extract_difficulty(d)
# assign group factor
d$group = "RABL"
# add to main dataframe
df = bind_rows(df, d)
}
# tidy up
rm(a, d ,f, import_names, block_files,sine_files,random_files)
#### now fix a few minor quirks in the data ####
# add site information
df$site <- "Aberdeen"
df$site[df$group == "SIBL" & df$participant > 20] <- "Essex"
df$site[df$group == "RABL" & df$participant > 55] <- "Essex"
# convert things to factors and remove white space from names
df$targ_side <- as.factor(df$targ_side)
levels(df$targ_side) <- c("left", "right", "absent")
df$key <- as.factor(df$key)
levels(df$key) <- c("l", "r", "x")
df$message <- as.factor(df$message)
df$block_type <- as.factor(df$block_type)
levels(df$block_type) <- c("blocked", "random", "sinewave")
df$group = as.factor(df$group)
df$site <- as.factor(df$site)
# change Difficulty levels to the actual degree of variance #
df$difficulty <- get_degrees(df$difficulty)
# turn degrees into radians
df$difficulty <- get_radians(df$difficulty)
# get information about correct judgements
df$correct <- 0
df$correct[df$key == "l" & df$targ_pr == 1] <- 1
df$correct[df$key == "r" & df$targ_pr == 0] <- 1
# mark trials to be removed due to incorrect key press
df$rt[df$key == "x"] <- NA
#### extract previous rt and accuracy ####
df$p_rt = NA
df$p_correct = NA
for (g in levels(df$group)) {
for  (person in unique(df$participant[df$group == g])){
for (bt in unique(df$block_type[df$group == g])) {
for (blk in unique(df$block)) {
# extract subset for person:block
d <- filter(df, participant == person, block == blk, block_type == bt, group == g)
if (nrow(d) > 0) {
# add in previous reaction time
d$p_rt[2:nrow(d)] = d$rt[1:(nrow(d)-1)]
# add in previous correct
d$p_correct[2:nrow(d)] = d$correct[1:(nrow(d)-1)]
# add back into main dataframe
df[which(df$participant == person & df$group == g & df$block_type == bt & df$block == blk),] <- d
rm(d)
} else {
rm(d)
}
}
}
}
}
rm(person, blk, bt, g)
#### save processed data! ####
# keep needed columns
df <- select(df,
participant,
block_type,
block,
trial,
targ_pr,
key,
difficulty,
correct,
rt,
p_rt,
p_correct,
site,
group)
unique(df$participant)
load("scratch/processed_data_nar_TA.rda")
unique(df_TA$participant)
summary(df_TA$participant)
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
rm(list = ls())
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
toberemoved <- which(df$site == "Essex" & df$group == "SIBL")
temp <- df[df$site == "Essex" & df$group == "SIBL"]
temp <- df[df$site == "Essex" & df$group == "SIBL",]
summary(temp$participant)
df <- df[-toberemoved,]
summary(df$participant)
rm(list = ls())
load("scratch/processed_data_nar.rda")
View(df_correct_only)
summary(df$correct)
summary(df_correct_only$correct)
View(df)
df$participant[df$participant > 20] <- df$participant - 14
df$participant[df$participant > 20,] <- df$participant - 14
df$participant[df$participant > 20,] <- df$participant[df$participant > 20,] - 14
df$participant <- df$participant[df$participant > 20,] - 14
df$participant <- df$participant[df$participant > 20] - 14
df[df$participant >= 21] <- df$participant - 14
df[df$participant >= 21] <- (df[df$participant] - 14)
View(df)
load("scratch/processed_data_nar.rda")
load("scratch/processed_data.rda")
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
df$difficulty <- round(df$difficulty, digits = 1)
toberemoved <- which(df$site == "Essex" & df$group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
total_observations <- length(df$rt)
# get average number of trials
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
total_observations
trials_per_participant = mean(number_of_trials$num_trials)
trials_per_participant
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
total_observations_nar
trials_per_participant_nar
trials_per_block_plt = ggplot(number_of_trials, aes(num_trials))
trials_per_block_plt = trials_per_block_plt + geom_bar()
trials_per_block_plt = trials_per_block_plt + xlab("Number of trials")
trials_per_block_plt = trials_per_block_plt + ylab("No. participants")
temp <- group_by(df, participant,block_type,group)
number_of_trials_2 <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_total_plt = ggplot(number_of_trials_2, aes(num_trials))
trials_total_plt = trials_total_plt + geom_bar()
trials_total_plt = trials_total_plt + xlab("Number of trials")
trials_total_plt = trials_total_plt + ylab("No. participants")
trials_per_block_plt
trials_total_plt
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
mean_rt_plot
median_rt_plot
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats_acc = summarise(temp, mean_correct = mean(correct),
median_correct = median(correct),
sdev = sd(correct),
N = length(correct),
se = sdev/sqrt(N),
upper_mean = mean_correct + se,
lower_mean = mean_correct - se,
upper_median = median_correct + se,
lower_median = median_correct - se)
rm(temp)
mean_acc_plot = ggplot(desc_stats_acc, aes(difficulty, mean_correct, colour = block_type))
mean_acc_plot = mean_acc_plot + geom_point()
mean_acc_plot = mean_acc_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_acc_plot = mean_acc_plot + facet_grid(group~targ_pr)
mean_acc_plot
# make targ_pr a factor
df$targ_pr <- as.factor(df$targ_pr)
# make separate density plot data frame
dense_data <- df
# make difficulty a factor just for this
dense_data$difficulty <- as.factor(dense_data$difficulty)
density_plot_RABL = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = targ_pr))
density_plot_RABL = density_plot_RABL + geom_density(alpha = 0.1)
density_plot_RABL = density_plot_RABL + facet_wrap(~block_type)
density_plot_RABL = density_plot_RABL + ggtitle("RABL group")
density_plot_SIBL = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = targ_pr))
density_plot_SIBL = density_plot_SIBL + geom_density(alpha = 0.1)
density_plot_SIBL = density_plot_SIBL + facet_wrap(~block_type)
density_plot_SIBL = density_plot_SIBL + ggtitle("SIBL group")
density_plot_RABL
density_plot_SIBL
density_plot_RABL_diff = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = difficulty))
density_plot_RABL_diff = density_plot_RABL_diff + geom_density(alpha = 0.1)
density_plot_RABL_diff = density_plot_RABL_diff + facet_grid(targ_pr~block_type)
density_plot_RABL_diff = density_plot_RABL_diff + ggtitle("RABL group")
density_plot_SIBL_diff = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = difficulty))
density_plot_SIBL_diff = density_plot_SIBL_diff + geom_density(alpha = 0.1)
density_plot_SIBL_diff = density_plot_SIBL_diff + facet_grid(targ_pr~block_type)
density_plot_SIBL_diff = density_plot_SIBL_diff + ggtitle("SIBL group")
density_plot_RABL_diff
density_plot_SIBL_diff
df$c_p_rt <- df$p_rt - mean(df$p_rt)
df$theta <- round(df$difficulty/pi, digits = 3)
df$theta_c <- df$theta - mean(df$theta)
df$targ_pr <- as.numeric(df$targ_pr)
# This causes 0 to be 2, so we need to change that back for dummy variables
df$targ_pr[df$targ_pr == 2] <- 0
df$isra <- ifelse(df$block_type == "random", 1,0)
df$issi <- ifelse(df$block_type == "sinewave",1,0)
temp <- df
temp$participant <- as.factor(temp$participant)
temp$participant <- as.numeric(temp$participant)
summary(temp$participant)
uniqu(temp$participant)
unique(temp$participant)
rm(list = ls())
dir()
dir("scratch")
load("scratch/processed_data_nar_TA.rda")
unique(df$partitipant)
unique(df$participant)
unique(df_TA$participant)
load("scratch/processed_data_nar.rda")
unique(df$participant)
rm(list = ls())
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
df$difficulty <- round(df$difficulty, digits = 1)
toberemoved <- which(df$site == "Essex" & df$group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
total_observations <- length(df$rt)
# get average number of trials
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
total_observations
trials_per_participant = mean(number_of_trials$num_trials)
trials_per_participant
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
total_observations_nar
trials_per_participant_nar
trials_per_block_plt = ggplot(number_of_trials, aes(num_trials))
trials_per_block_plt = trials_per_block_plt + geom_bar()
trials_per_block_plt = trials_per_block_plt + xlab("Number of trials")
trials_per_block_plt = trials_per_block_plt + ylab("No. participants")
temp <- group_by(df, participant,block_type,group)
number_of_trials_2 <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_total_plt = ggplot(number_of_trials_2, aes(num_trials))
trials_total_plt = trials_total_plt + geom_bar()
trials_total_plt = trials_total_plt + xlab("Number of trials")
trials_total_plt = trials_total_plt + ylab("No. participants")
trials_per_block_plt
trials_total_plt
# so mean and median rt by group, block type, difficulty, and Ta vs Tp
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
mean_rt_plot
median_rt_plot
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats_acc = summarise(temp, mean_correct = mean(correct),
median_correct = median(correct),
sdev = sd(correct),
N = length(correct),
se = sdev/sqrt(N),
upper_mean = mean_correct + se,
lower_mean = mean_correct - se,
upper_median = median_correct + se,
lower_median = median_correct - se)
rm(temp)
mean_acc_plot = ggplot(desc_stats_acc, aes(difficulty, mean_correct, colour = block_type))
mean_acc_plot = mean_acc_plot + geom_point()
mean_acc_plot = mean_acc_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_acc_plot = mean_acc_plot + facet_grid(group~targ_pr)
mean_acc_plot
# make targ_pr a factor
df$targ_pr <- as.factor(df$targ_pr)
# make separate density plot data frame
dense_data <- df
# make difficulty a factor just for this
dense_data$difficulty <- as.factor(dense_data$difficulty)
density_plot_RABL = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = targ_pr))
density_plot_RABL = density_plot_RABL + geom_density(alpha = 0.1)
density_plot_RABL = density_plot_RABL + facet_wrap(~block_type)
density_plot_RABL = density_plot_RABL + ggtitle("RABL group")
density_plot_SIBL = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = targ_pr))
density_plot_SIBL = density_plot_SIBL + geom_density(alpha = 0.1)
density_plot_SIBL = density_plot_SIBL + facet_wrap(~block_type)
density_plot_SIBL = density_plot_SIBL + ggtitle("SIBL group")
density_plot_RABL
density_plot_SIBL
density_plot_RABL_diff = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = difficulty))
density_plot_RABL_diff = density_plot_RABL_diff + geom_density(alpha = 0.1)
density_plot_RABL_diff = density_plot_RABL_diff + facet_grid(targ_pr~block_type)
density_plot_RABL_diff = density_plot_RABL_diff + ggtitle("RABL group")
density_plot_SIBL_diff = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = difficulty))
density_plot_SIBL_diff = density_plot_SIBL_diff + geom_density(alpha = 0.1)
density_plot_SIBL_diff = density_plot_SIBL_diff + facet_grid(targ_pr~block_type)
density_plot_SIBL_diff = density_plot_SIBL_diff + ggtitle("SIBL group")
density_plot_RABL_diff
density_plot_SIBL_diff
# centre p_rt
df$c_p_rt <- df$p_rt - mean(df$p_rt)
# change difficulty name
#colnames(df)[7] <- "theta"
#rescale difficulty for the models
df$theta <- round(df$difficulty/pi, digits = 3)
# create a centred version
df$theta_c <- df$theta - mean(df$theta)
df$targ_pr <- as.numeric(df$targ_pr)
# This causes 0 to be 2, so we need to change that back for dummy variables
df$targ_pr[df$targ_pr == 2] <- 0
df$isra <- ifelse(df$block_type == "random", 1,0)
df$issi <- ifelse(df$block_type == "sinewave",1,0)
rm(list = ls())
dir("scratch")
load("scratch/processed_data_nar_TA.rda")
unique(df_TA$participant)
rm(list = ls())
library(tidyverse)
load("scratch/processed_data.rda")
knitr::opts_chunk$set(fig.width=12, fig.height=6.5)
df$difficulty <- round(df$difficulty, digits = 1)
toberemoved <- which(df$site == "Essex" & df$group == "SIBL")
df <- df[-toberemoved,]
rm(toberemoved)
total_observations <- length(df$rt)
# get average number of trials
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
total_observations
trials_per_participant = mean(number_of_trials$num_trials)
trials_per_participant
df <- df[complete.cases(df),]
total_observations_nar <- length(df$rt)
temp <- group_by(df, participant,block_type,block,group)
number_of_trials <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_per_participant_nar <- mean(number_of_trials$num_trials)
percent_remaining <- round((total_observations_nar/total_observations)*100)
total_observations_nar
trials_per_participant_nar
trials_per_block_plt = ggplot(number_of_trials, aes(num_trials))
trials_per_block_plt = trials_per_block_plt + geom_bar()
trials_per_block_plt = trials_per_block_plt + xlab("Number of trials")
trials_per_block_plt = trials_per_block_plt + ylab("No. participants")
temp <- group_by(df, participant,block_type,group)
number_of_trials_2 <- summarise(temp, num_trials = length(rt))
rm(temp)
trials_total_plt = ggplot(number_of_trials_2, aes(num_trials))
trials_total_plt = trials_total_plt + geom_bar()
trials_total_plt = trials_total_plt + xlab("Number of trials")
trials_total_plt = trials_total_plt + ylab("No. participants")
trials_per_block_plt
trials_total_plt
# so mean and median rt by group, block type, difficulty, and Ta vs Tp
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats = summarise(temp, mean_rt = mean(rt),
median_rt = median(rt),
sdev = sd(rt),
N = length(rt),
se = sdev/sqrt(N),
upper_mean = mean_rt + se,
lower_mean = mean_rt - se,
upper_median = median_rt + se,
lower_median = median_rt - se)
rm(temp)
mean_rt_plot = ggplot(desc_stats, aes(difficulty, mean_rt, colour = block_type))
mean_rt_plot = mean_rt_plot + geom_point()
mean_rt_plot = mean_rt_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_rt_plot = mean_rt_plot + facet_grid(group~targ_pr)
median_rt_plot = ggplot(desc_stats, aes(difficulty, median_rt, colour = block_type))
median_rt_plot = median_rt_plot + geom_point()
median_rt_plot = median_rt_plot + geom_errorbar(aes(ymin = lower_median, ymax = upper_median))
median_rt_plot = median_rt_plot + facet_grid(group~targ_pr)
mean_rt_plot
median_rt_plot
temp = group_by(df, group, block_type, difficulty, targ_pr)
desc_stats_acc = summarise(temp, mean_correct = mean(correct),
median_correct = median(correct),
sdev = sd(correct),
N = length(correct),
se = sdev/sqrt(N),
upper_mean = mean_correct + se,
lower_mean = mean_correct - se,
upper_median = median_correct + se,
lower_median = median_correct - se)
rm(temp)
mean_acc_plot = ggplot(desc_stats_acc, aes(difficulty, mean_correct, colour = block_type))
mean_acc_plot = mean_acc_plot + geom_point()
mean_acc_plot = mean_acc_plot + geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean))
mean_acc_plot = mean_acc_plot + facet_grid(group~targ_pr)
mean_acc_plot
# make targ_pr a factor
df$targ_pr <- as.factor(df$targ_pr)
# make separate density plot data frame
dense_data <- df
# make difficulty a factor just for this
dense_data$difficulty <- as.factor(dense_data$difficulty)
density_plot_RABL = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = targ_pr))
density_plot_RABL = density_plot_RABL + geom_density(alpha = 0.1)
density_plot_RABL = density_plot_RABL + facet_wrap(~block_type)
density_plot_RABL = density_plot_RABL + ggtitle("RABL group")
density_plot_SIBL = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = targ_pr))
density_plot_SIBL = density_plot_SIBL + geom_density(alpha = 0.1)
density_plot_SIBL = density_plot_SIBL + facet_wrap(~block_type)
density_plot_SIBL = density_plot_SIBL + ggtitle("SIBL group")
density_plot_RABL
density_plot_SIBL
density_plot_RABL_diff = ggplot(dense_data[dense_data$group == "RABL",], aes(rt, colour = difficulty))
density_plot_RABL_diff = density_plot_RABL_diff + geom_density(alpha = 0.1)
density_plot_RABL_diff = density_plot_RABL_diff + facet_grid(targ_pr~block_type)
density_plot_RABL_diff = density_plot_RABL_diff + ggtitle("RABL group")
density_plot_SIBL_diff = ggplot(dense_data[dense_data$group == "SIBL",], aes(rt, colour = difficulty))
density_plot_SIBL_diff = density_plot_SIBL_diff + geom_density(alpha = 0.1)
density_plot_SIBL_diff = density_plot_SIBL_diff + facet_grid(targ_pr~block_type)
density_plot_SIBL_diff = density_plot_SIBL_diff + ggtitle("SIBL group")
density_plot_RABL_diff
density_plot_SIBL_diff
# centre p_rt
df$c_p_rt <- df$p_rt - mean(df$p_rt)
# change difficulty name
#colnames(df)[7] <- "theta"
#rescale difficulty for the models
df$theta <- round(df$difficulty/pi, digits = 3)
# create a centred version
df$theta_c <- df$theta - mean(df$theta)
df$targ_pr <- as.numeric(df$targ_pr)
# This causes 0 to be 2, so we need to change that back for dummy variables
df$targ_pr[df$targ_pr == 2] <- 0
df$isra <- ifelse(df$block_type == "random", 1,0)
df$issi <- ifelse(df$block_type == "sinewave",1,0)
df$participant <- as.factor(df$participant)
df$participant <- as.numeric(df$participant)
df_correct_only <- df[df$correct == 1,]
# remove everything but the df
rm(list=ls()[!(ls() %in% c("df","df_correct_only"))])
# Save only the new data frame
save(df, df_correct_only, file = "scratch/processed_data_nar.rda")
# add column
df$TATP <- 0
# define when it's TA or TP
df$TATP[df$key == "l"] <- "TP"
df$TATP[df$key == "r"] <- "TA"
# version with only TA judgements
df_TA <- df[df$TATP == "TA",]
# save this
save(df_TA, file = "scratch/processed_data_nar_TA.rda")
load("scratch/processed_data_nar_TA.rda")
unique(df_TA$participant)
